name: ECS service update
description: Force ECS services to pull updated images and redeploy
inputs:
  aws-access-key-id:
    required: true
  aws-secret-access-key:
    required: true
  aws-session-token:
    required: true
  env-name:
    required: true
  service-names:
    required: true
    description: |
      A stringified (JSON) array of service names.
      If you are passing a literal array in YAML, make sure to add quotes so that it is actually a string.
  region:
    required: false
    default: eu-north-1
  dry-run:
    required: false
    default: false
runs:
  using: composite
  steps:
    - name: Parse service names
      id: services
      shell: bash
      run: |
        inputs='${{inputs.service-names}}'
        patternBracketsAndSpace="[[\] ]"
        patternNewline=$'\n'
        patternComma=","
        echo $inputs
        tmpBracketsAndSpace="${inputs//${patternBracketsAndSpace}/}"
        echo $tmpBracketsAndSpace
        tmpNewline="${tmpBracketsAndSpace//${patternNewline}/}"
        echo $tmpNewline
        servicesArray="(${tmpNewline//${patternComma}/ })"
        echo $servicesArray
        
        echo "::set-output name=services::${servicesArray}"
    - name: Update services
      shell: bash
      run: |
        services=${{ steps.services.outputs.services }}
        echo "### :rocket: Updated services (dry-run=${{ inputs.dry-run}})" >> $GITHUB_STEP_SUMMARY
        for service in ${services[@]}
        do
          echo "::group::Updating ${service}"
          serviceName=${{ inputs.env-name }}-$service
          command="aws ecs update-service --cluster ${{ inputs.env-name }}-cluster --service $serviceName --force-new-deployment --region ${{ inputs.region}}"
          if [ ${{ inputs.dry-run }} == "false" ];
          then
            $command
          else
            echo "[dry-run] $command"
          fi
          echo "* ${serviceName}" >> $GITHUB_STEP_SUMMARY
          echo "::endgroup::"
        done
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
        AWS_SESSION_TOKEN: ${{ inputs.aws-session-token }}
