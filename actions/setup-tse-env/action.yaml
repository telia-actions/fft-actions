name: "setup tse env"
description: Github action to setup tse environment infrastructure
inputs:
  apply-changes:
    description: Should changes be applied, aletnatively dry-run
    required: false
  aws-accsess-key-id:
    required: true
  aws-secret-access-key:
    required: true
  aws-session-token:
    required: true
  env-name:
    required: true
  git-token:
    required: true
  terraform-parameters:
    description: Additional terraform parameters
    required: true
  type:
    description: Environment type 'pull_request' or 'preview' allowed
    required: true
outputs:
  domain_name:
    value: ${{ steps.terraform_output.outputs.domain_name }}
runs:
  using: composite
  steps:
    - name: Set env vars
      shell: bash
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ inputs.aws-accsess-key-id }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ inputs.aws-secret-access-key }}" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=${{ inputs.aws-session-token }}" >> $GITHUB_ENV
    - name: Variables
      shell: bash
      id: variables
      run: echo '::set-output name=terraform_working_dir::fft-aws-infrastructure/tse/${{ inputs.type }}'
    - name: Checkout repository code
      uses: actions/checkout@v2
      with:
        token: ${{ inputs.git-token }}
        repository: telia-company/fft-aws-infrastructure
        path: fft-aws-infrastructure
    - name: Copy config
      run: mv ${{ inputs.terraform-parameters }} ${{ steps.variables.outputs.terraform_working_dir }}
      shell: bash
    - name: Terraform Init
      run: terraform init -backend-config="key=pipeline/tse/${{ inputs.type }}/${{ inputs.env-name }}.tfstate"
      shell: bash
      working-directory: ${{ steps.variables.outputs.terraform_working_dir }}
    - name: Terraform plan
      env:
        TF_VAR_env_name: ${{ inputs.env-name }}
      run: terraform plan -var-file="${{ inputs.terraform-parameters }}" -out plan
      shell: bash
      working-directory: ${{ steps.variables.outputs.terraform_working_dir }}
    - name: Terraform Apply
      if: ${{ inputs.apply-changes == 'true' }}
      run: terraform apply -auto-approve "plan"
      shell: bash
      working-directory: ${{ steps.variables.outputs.terraform_working_dir }}
    - name: Terraform output
      id: terraform_output
      if: ${{ inputs.apply-changes == 'true' }}
      run: echo "::set-output name=domain_name::$(terraform output -raw domain_name)"
      shell: bash
      working-directory: ${{ steps.variables.outputs.terraform_working_dir }}
